{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","selected","Array","fill","prefectures","series","loading","changeSelection","bind","fetch","headers","process","then","response","json","res","setState","result","this","index","selected_copy","slice","series_copy","i","length","name","prefName","splice","tmp","Object","keys","data","forEach","year","push","value","res_series","key","prefCode","style","margin","display","type","checked","onChange","obj","options","title","text","yAxis","xAxis","plotOptions","label","connectorAllowed","pointInterval","pointStart","align","map","renderItem","highcharts","Highcharts","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qVAsHeA,E,YAjHb,WAAaC,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,MAAQ,CACXC,SAAUC,MAAM,IAAIC,MAAK,GACzBC,YAAa,GACbC,OAAQ,GACRC,SAAS,GAEX,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBARL,E,sNAYZC,MAAM,yDAA0D,CACpEC,QAAS,CAAE,YAAaC,8CAEvBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CAAEZ,YAAaW,EAAIE,Y,OAErCC,KAAKF,SAAS,CAACV,SAAS,I,4IAGVa,GAAQ,IAAD,OACfC,EAAgBF,KAAKlB,MAAMC,SAASoB,QAG1C,GAFAD,EAAcD,IAAUC,EAAcD,GAEjCD,KAAKlB,MAAMC,SAASkB,GAwBlB,CAEL,IADA,IAAMG,EAAcJ,KAAKlB,MAAMK,OAAOgB,QAC7BE,EAAI,EAAGA,EAAID,EAAYE,OAAQD,IAClCD,EAAYC,GAAGE,OAASP,KAAKlB,MAAMI,YAAYe,GAAOO,UACxDJ,EAAYK,OAAOJ,EAAG,GAG1BL,KAAKF,SAAS,CACZf,SAAUmB,EACVf,OAAQiB,SAhCVb,MAAM,iGAAD,OAC8FU,EAAQ,GACzG,CACET,QAAS,CAAE,YAAaC,8CAGzBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,IAAIa,EAAM,GACVC,OAAOC,KAAKf,EAAIE,OAAOc,KAAK,GAAGA,MAAMC,SAAQ,SAAAT,GACvCR,EAAIE,OAAOc,KAAK,GAAGA,KAAKR,GAAGU,KAAO,MACpCL,EAAIM,KAAKnB,EAAIE,OAAOc,KAAK,GAAGA,KAAKR,GAAGY,UAGxC,IAAMC,EAAa,CACjBX,KAAM,EAAKzB,MAAMI,YAAYe,GAAOO,SACpCK,KAAMH,GAER,EAAKZ,SAAS,CACZf,SAAUmB,EACVf,OAAO,GAAD,mBAAM,EAAKL,MAAMK,QAAjB,CAAyB+B,W,iCAiB9BrC,GAAQ,IAAD,OAChB,OACE,yBAAKsC,IAAKtC,EAAMuC,SAAUC,MAAO,CAAEC,OAAQ,MAAOC,QAAS,iBACzD,2BAAOC,KAAK,WAAWC,QAASzB,KAAKlB,MAAMC,SAASF,EAAMuC,SAAW,GAAIM,SAAU,kBAAM,EAAKrC,gBAAgBR,EAAMuC,SAAW,MAC9HvC,EAAM2B,Y,+BAKH,IAAD,OACDmB,EAAM3B,KAAKlB,MAAMI,YACjB0C,EAAU,CACdC,MAAO,CACLC,KAAM,uCAGRC,MAAO,CACLF,MAAO,CACLC,KAAM,eAIVE,MAAO,CACLH,MAAO,CACLC,KAAM,SAIVG,YAAa,CACX9C,OAAQ,CACN+C,MAAO,CACLC,kBAAkB,GAEpBC,cAAe,EACfC,WAAY,OAGhBlD,OAAQa,KAAKlB,MAAMK,QAErB,OACE,6BACE,wBAAImD,MAAM,UAAV,mFACC3B,OAAOC,KAAKe,GAAKY,KAAI,SAAAlC,GAAC,OAAI,EAAKmC,WAAWb,EAAItB,OAC/C,kBAAC,IAAD,CAAiBoC,WAAYC,IAAYd,QAASA,S,GA5GxCe,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7D,MAAK,SAAA8D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.015b8666.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      selected: Array(47).fill(false),\n      prefectures: {},\n      series: [],\n      loading: true\n    }\n    this.changeSelection = this.changeSelection.bind(this);\n  }\n\n  async componentDidMount () {\n    await fetch('https://opendata.resas-portal.go.jp/api/v1/prefectures', {\n      headers: { 'X-API-KEY': process.env.REACT_APP_RESAS_API_KEY }\n    })\n      .then(response => response.json())\n      .then(res => {\n        this.setState({ prefectures: res.result })\n    })\n    this.setState({loading: false})\n  }\n\n  changeSelection(index) {\n    const selected_copy = this.state.selected.slice()\n    selected_copy[index] = !selected_copy[index]\n\n    if (!this.state.selected[index]) {\n      fetch(\n        `https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?cityCode=-&prefCode=${index + 1}`,\n        {\n          headers: { 'X-API-KEY': process.env.REACT_APP_RESAS_API_KEY }\n        }\n      )\n        .then(response => response.json())\n        .then(res => {\n          let tmp = []\n          Object.keys(res.result.data[0].data).forEach(i => {\n            if (res.result.data[0].data[i].year < 2020) {\n              tmp.push(res.result.data[0].data[i].value)\n            }\n          })\n          const res_series = {\n            name: this.state.prefectures[index].prefName,\n            data: tmp\n          }\n          this.setState({\n            selected: selected_copy,\n            series: [...this.state.series, res_series]\n          })\n        })\n    } else {\n      const series_copy = this.state.series.slice()\n      for (let i = 0; i < series_copy.length; i++) {\n        if (series_copy[i].name === this.state.prefectures[index].prefName) {\n          series_copy.splice(i, 1)\n        }\n      }\n      this.setState({\n        selected: selected_copy,\n        series: series_copy\n      })\n    }\n  }\n\n  renderItem(props) {\n    return (\n      <div key={props.prefCode} style={{ margin: '5px', display: 'inline-block' }}>\n        <input type=\"checkbox\" checked={this.state.selected[props.prefCode - 1]} onChange={() => this.changeSelection(props.prefCode - 1)} />\n        {props.prefName}\n      </div>\n    )\n  }\n\n  render() {\n    const obj = this.state.prefectures\n    const options = {\n      title: {\n        text: '人口推移, 1965~2020'\n      },\n\n      yAxis: {\n        title: {\n          text: 'Population'\n        }\n      },\n\n      xAxis: {\n        title: {\n          text: 'Year'\n        }\n      },\n\n      plotOptions: {\n        series: {\n          label: {\n            connectorAllowed: false\n          },\n          pointInterval: 5,\n          pointStart: 1965\n        }\n      },\n      series: this.state.series\n    }\n    return (\n      <div>\n        <h1 align='center'>都道府県別 総人口推移グラフ</h1>\n        {Object.keys(obj).map(i => this.renderItem(obj[i]))}\n        <HighchartsReact highcharts={Highcharts} options={options} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}